type Mutation {
    createVendedor(inputVendedor: InputVendedor!): Vendedor
    updateVendedor(id: ID!, inputVendedor: InputVendedor!): Vendedor
    deleteVendedor(id: ID!): Vendedor
    deleteVendedorById(VendedorId: ID!): String
    saveVendedor(dto: InputVendedor!): Vendedor
    updateVendedorWithId(id: ID!, dto: InputVendedor!): Vendedor
    createCliente(inputCliente: InputCliente!): Cliente
    updateCliente(id: ID!, inputCliente: InputCliente!): Cliente
    deleteCliente(id: ID!): Cliente

    createRegistrarHorario(inputRegistrarHorario: InputRegistrarHorario!): RegistrarHorario
    updateRegistrarHorario(id: ID!, inputRegistrarHorario: InputRegistrarHorario!): RegistrarHorario
    deleteRegistrarHorario(id: ID!): RegistrarHorario

    deleteClienteById(ClienteId: ID!): String
    saveCliente(dto: InputCliente!): Cliente
    updateClienteWithId(id: ID!, dto: InputCliente!): Cliente

    saveCategoria(inputCategoria: InputCategoria!): Categoria
    updateCategoria(id: ID!, inputCategoria: InputCategoria!): Categoria
    deleteCategoria(id: ID!): Categoria

    createUsuario(inputUsuario: InputUsuario!): Usuario
    updateUsuario(id: ID!, inputUsuario: InputUsuario!): Usuario
    deleteUsuario(id: ID!): Usuario
    login(input: LoginInput!): AuthPayload!

    createProducto(inputProducto: InputProducto!): Producto
    updateProducto(id: ID!, inputProducto: InputProducto!): Producto
    deleteProducto(id: ID!): Producto

    crearVenta(input: InputVenta!): Venta!
    actualizarVenta(id: ID!, input: InputVenta!): Venta!
    eliminarVenta(id: ID!): Boolean!
}